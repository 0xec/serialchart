= Advanced Serial Chart Features =

_Please note that these features are experimental and might not be available in the download compiled version, please get Qt SDK and compile/run the source code from SVN repository. The new modular design allows you to add new type of ports, decoders, and display filters._

Basic data chain in the new framework is as follows:

PORT (RAW DATA FROM SERIAL/USB PORT) -> DECODER(PROCESSES DATA) -> VALUES(displayed on screen/chart)

={{{[_setup_] section }}}=


==_port_==

===Open a usb COM port===

{{{
port = COM1
}}}

see  ConfigurationFileSyntax  for related options


===Open a USB HID device (keyboard/mouse/gamepad)===

{{{
port = HID   
vid = 0079
pid = 5d0f
}}}

_Tip: use an utility like USBDeview http://www.nirsoft.net/utils/usb_devices_view.html to find the vendor and product IDs of a specific device (VID/PID)._


==_decoder_==

===Specify CSV decoding (default)===

{{{
decoder = csv
}}}

===Specify binary decoding===

{{{
decoder = bin
}}}

===Specify HDLC-style decoding===

{{{
decoder =hdlc
hdlc_esc =7d
hdlc_sep =7e
hdlc_xor =20
}}}

==_display_==

===Display *raw* data coming from port (default)===

{{{
display = raw
}}}

===Display data as a *list* of values===

{{{
display = list
display_sep = ,
display_skip_transparent = 1
}}}

Please note that the separator can be specified in [http://en.wikipedia.org/wiki/Percent-encoding Percent Encoded] string for example for a TAB separated list use:

{{{
display = list
display_sep = %09
}}}

Tip: TAB separated values can be easily Copy & Pasted into an Excel spreadsheet. (In Excel use Paste > Paste Special and select Text as format).

===Display data as HEX string=== 

{{{
display = hex
}}}

={{{[any field] sections}}} =

===Specify data length/type for BIN/HDLC decodings===

{{{
type = byte / sbyte / word / sword / float
}}}


===Specify data Endianness===

see http://en.wikipedia.org/wiki/Endianness

{{{
endian  = msbf / lsbf
}}}


msbf -> most significant byte first  
lsbf -> least significant byte first


===Specify data format for custom display (ex: display = list) ===

{{{
format = %g / %f / %d / %n / %s / %x
}}}

%n -> field name

%f -> float, format as -9.9

%g -> float, format as -9.9 or -9.9e+9 whichever is shorter

%d -> decimal integer

%s -> raw data for this value

%x -> hex of raw data

You can combine formats as follows:

{{{
[MyField]
type = float
precision = 3
format = %n = %f
}}}

will output for ex:

... , MyField `=` 1.123 , ...




===Set precision of floats in format===

{{{
precision = 6   
}}}


Here is how this formatting is applied (providing source code) :

{{{
v.replace(QByteArray("%g"),QByteArray::number(packetValues[i].toDouble(),'g',precision));
v.replace(QByteArray("%f"),QByteArray::number(packetValues[i].toDouble(),'f',precision));
v.replace(QByteArray("%d"),QByteArray::number(packetValues[i].toInt(),'f',0));
v.replace(QByteArray("%n"),field.toAscii());
v.replace(QByteArray("%s"),packetParts[i]);
v.replace(QByteArray("%x"),packetParts[i].toHex());
}}}